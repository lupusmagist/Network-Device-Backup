# https://docs.docker.com/compose/compose-file/
version: '3.7'
services:
  appserver:
    build: ./webapp
    command: >
      gunicorn -b 0.0.0.0:8000
        --access-logfile -
        --reload
        --timeout 120
        webapp:create_app()
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Africa/Johannesburg
      - DEBIAN_FRONTEND=noninteractive
    healthcheck:
      test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8000/healthy}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "${DOCKER_STOP_GRACE_PERIOD:-3s}"
    depends_on:
      - database
      - rabbit
    links:
        - rabbit
        - appworker
    volumes:
      - '.:/webapp'
      # Format is: Path on host:absolute path in container (Mountpoint)
      # - 'data-volume:/data'
    ports:
      - '8000:8000'

  appworker:
    build:
      context: ./webapp
    hostname: worker
    command: >
      celery worker -A webapp.celery_app --uid=nobody --gid=nogroup
      --loglevel=info
    depends_on:
      - rabbit
    links:
        - rabbit
    volumes:
      - '.:/webapp'

  appworker-beat:
    build:
      context: ./webapp
    hostname: worker-beat
    command: >
      celery beat -A webapp.celery_app --uid=nobody --gid=nogroup
      --loglevel=info
    depends_on:
      - rabbit
    links:
        - rabbit
    volumes:
      - '.:/webapp'

  workermonitor:
    build:
      context: ./webapp
    hostname: workermonitor
    command: >
      flower -A webapp.celery_app --port=8009 --loglevel=info
    depends_on:
      - appworker
      - appworker-beat
      - rabbit
    links:
        - rabbit
    volumes:
      - '.:/webapp'
    ports:
      - '8009:8009'

  rabbit:
      hostname: rabbit
      image: rabbitmq:3-management
      env_file:
        - .env
      ports:
          - "5673:5672"
          - "8008:15672"

  nginx:
    image: 'nginx:1.17-alpine'
    volumes:
      - './websrv/nginx.conf:/etc/nginx/nginx.conf'
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - appserver

  database:
    image: 'postgres:12' # use latest official postgres version
    env_file:
      - .env # configure postgres
    volumes:
      - database-data:/var/lib/postgresql/data/
    ports:
      - 5432:5432

# Volumes are sharable spaces made and controlled by Docker
# These spaces can be used between containers.
# These spaces cannot be accessed from outside Docker.
volumes:
  # data-volume:
  database-data:
